'use client'; // This directive is necessary for using React hooks in Next.js App Router

import React, { useState, useEffect, useMemo, useRef } from 'react';
import { Search, MapPin, ShoppingCart, User, Menu, X, Gift, Star, Ticket, Zap, Award, Mail, Phone, Globe, LogOut, ChevronDown, Loader2, Plus, Minus, Trash2, CheckCircle, ArrowLeft, Filter, Share2, Heart, Clock, Download, ThumbsUp, Bookmark, Package, ChevronRight, RotateCw, Users, Store, Globe2, UploadCloud, FileText, Camera, LayoutDashboard, Eye, MousePointerClick, Wallet, BarChart2, Tag, Info, ListChecks, Image as ImageIcon, Check, MoreVertical, Edit, Power, ArrowDownCircle, ArrowUpCircle, Settings, Bell, Shield, CheckCircle2, XCircle, UserX, MessageSquare, Send, Sparkles, Building, Phone as PhoneIcon, Palette, Newspaper, Code, QrCode, Home, Megaphone, TrendingUp, Stamp, Bot, StarIcon, LifeBuoy, HelpCircle, Facebook, Twitter, Instagram } from 'lucide-react';

// --- Type Definitions ---
type TimeLeft = {
  days: number;
  hours: number;
  minutes: number;
  seconds: number;
};
type PageParams = { dealId?: number; vendorSlug?: string; [key: string]: any; }
type PageState = { name: string; params: PageParams; }


// --- Mock Data ---
const initialCategories = [ { id: 1, name: 'Coupons' }, { id: 2, name: 'Gifts' }, { id: 3, name: 'Spins' }, { id: 4, name: 'Scratches' }, { id: 5, name: 'Draws' }, ];
const allDeals = [ { id: 1, vendor: 'Pizza Planet', title: 'Buy 1 Get 1 Free Large Pizza', price: 0, type: 'Free Coupon', imageUrl: 'https://placehold.co/600x400/2E1065/FFFFFF?text=Pizza+Deal', city: 'Gujranwala', category: 'coupons', description: 'Enjoy two large pizzas for the price of one! Valid on all classic flavors.', rules: 'Not valid with other offers. Dine-in or takeaway only.', stock: 100, sold: 25, status: 'Active' }, { id: 2, vendor: 'The Style Hub', title: 'Flat 30% Off on All Jeans', price: 100, type: 'Paid Voucher', imageUrl: 'https://placehold.co/600x400/FF3366/FFFFFF?text=Fashion+Sale', city: 'Gujranwala', category: 'coupons', description: 'Upgrade your wardrobe with our latest collection of denim.', rules: 'Voucher is non-refundable. One voucher per customer.', stock: 50, sold: 10, status: 'Active' }, { id: 3, vendor: 'Gadget Galaxy', title: 'Win a new Smartphone!', price: 50, type: 'Enter Draw', imageUrl: 'https://placehold.co/600x400/2E1065/FFFFFF?text=Gadget+Draw', city: 'Gujranwala', category: 'draws', description: 'Get a chance to win the latest smartphone for just PKR 50.', rules: 'Draw will be held on August 1, 2025.', endDate: new Date('2025-08-01T23:59:59'), stock: 1000, sold: 250, status: 'Active' }, { id: 4, vendor: 'Cafe Beans', title: 'Free Coffee Scratch Card', price: 0, type: 'Free Scratchie', imageUrl: 'https://placehold.co/600x400/FF3366/FFFFFF?text=Free+Coffee', city: 'Gujranwala', category: 'scratches', description: 'Try your luck! Scratch the card to reveal your prize.', rules: 'One scratch card per person per day.', stock: 500, sold: 150, status: 'Paused' }, { id: 5, vendor: 'Lahore Eatery', title: '25% off on entire bill', price: 0, type: 'Free Coupon', imageUrl: 'https://placehold.co/600x400/2E1065/FFFFFF?text=Lahore+Deal', city: 'Lahore', category: 'coupons', description: 'A delicious 25% discount on your total bill.', rules: 'Minimum spend of PKR 1000 applies.', stock: 200, sold: 80, status: 'Active' }, { id: 6, vendor: 'Lahori Bites', title: 'Free Drink with any Burger', price: 0, type: 'Free Coupon', imageUrl: 'https://placehold.co/600x400/FF3366/FFFFFF?text=Lahore+Food', city: 'Lahore', category: 'coupons', description: 'Buy any of our juicy burgers and get a refreshing drink absolutely free.', rules: 'Offer valid for a limited time only.', stock: 300, sold: 120, status: 'Active' }, { id: 7, vendor: 'Tech Giveaway', title: 'Win a Gaming Laptop', price: 100, type: 'Enter Draw', imageUrl: 'https://placehold.co/600x400/FF3366/FFFFFF?text=Laptop+Draw', city: 'Gujranwala', category: 'draws', description: 'Enter for a chance to win a high-performance gaming laptop. The ultimate prize for any gamer.', rules: 'Winner selected randomly from all entries.', endDate: new Date(new Date().getTime() + 5 * 24 * 60 * 60 * 1000), stock: 500, sold: 100, status: 'Active' }, ];
const availableCities = ['Gujranwala', 'Lahore', 'Karachi', 'Islamabad', 'Faisalabad', 'Rawalpindi'];
const initialVendors = [ { id: 1, name: 'Pizza Planet', slug: 'pizza-planet', city: 'Gujranwala', type: 'Offline', status: 'Active', joined: '2025-01-15', heroImageUrl: 'https://placehold.co/1200x400/2E1065/FFFFFF?text=Pizza+Planet', businessDescription: 'The best pizza in town! We serve authentic Italian pizza with fresh ingredients.' }, { id: 2, name: 'The Style Hub', slug: 'the-style-hub', city: 'Gujranwala', type: 'Online', status: 'Active', joined: '2025-02-20' }, { id: 3, name: 'New Cafe', slug: 'new-cafe', city: 'Lahore', type: 'Offline', status: 'Pending Approval', joined: '2025-07-19' }, { id: 4, 'name': 'Karachi Electronics', slug: 'karachi-electronics', city: 'Karachi', type: 'Online', status: 'Suspended', joined: '2025-03-10' }, { id: 5, 'name': 'Islamabad Books', slug: 'islamabad-books', city: 'Islamabad', type: 'Online', status: 'Pending Approval', joined: '2025-07-20' }, ];
const initialRefunds = [ { id: 1, orderId: 'X7B2A', vendor: 'The Style Hub', amount: 100, reason: 'The voucher code I received was already used when I tried to apply it on the brand\'s website. I contacted their support but they were unhelpful.', status: 'Pending', date: '2025-07-20' }, { id: 2, orderId: 'L9P4C', vendor: 'Tech Giveaway', amount: 100, reason: 'Accidental purchase', status: 'Pending', date: '2025-07-19' }, { id: 3, orderId: 'K2O5D', vendor: 'Pizza Planet', amount: 0, reason: 'Coupon was not honored', status: 'Approved', date: '2025-07-18' }, { id: 4, orderId: 'M6Q8F', vendor: 'Karachi Electronics', amount: 250, reason: 'Item out of stock', status: 'Rejected', date: '2025-07-17' }, ];
const initialBanners = [ { id: 1, name: 'Summer Sale Hero', position: 'Hero (Home)', city: 'All', status: true, imageUrl: 'https://placehold.co/1280x400/FF3366/FFFFFF?text=Summer+Sale' }, { id: 2, name: 'Food Deals Sidebar', position: 'Side Rail', city: 'Lahore', status: true, imageUrl: 'https://placehold.co/300x600/2E1065/FFFFFF?text=Foodie+Deals' }, { id: 3, name: 'Eid Campaign', position: 'Category Top', city: 'All', status: false, imageUrl: 'https://placehold.co/800x200/FFC700/000000?text=Eid+Mubarak' }, ];
const initialCustomers = [ { id: 1, name: 'Ali Khan', email: 'ali.khan@example.com', city: 'Lahore', totalOrders: 5, totalPoints: 1250, joined: '2025-01-20' }, { id: 2, name: 'Fatima Ahmed', email: 'fatima.ahmed@example.com', city: 'Karachi', totalOrders: 2, totalPoints: 300, joined: '2025-02-15' }, { id: 3, name: 'Bilal Raja', email: 'bilal.raja@example.com', city: 'Islamabad', totalOrders: 10, totalPoints: 5000, joined: '2025-03-01' }, { id: 4, name: 'Ayesha Malik', email: 'ayesha.malik@example.com', city: 'Lahore', totalOrders: 1, totalPoints: 50, joined: '2025-07-21' }, ];
const initialRewards = [ { id: 1, title: 'Free Coffee', points: 500, vendor: 'Cafe Beans', imageUrl: 'https://placehold.co/600x400/FFC700/000000?text=Free+Coffee' }, { id: 2, title: 'PKR 1000 Off Voucher', points: 2000, vendor: 'The Style Hub', imageUrl: 'https://placehold.co/600x400/FF3366/FFFFFF?text=1000+Off' }, { id: 3, title: 'Free Small Pizza', points: 1500, vendor: 'Pizza Planet', imageUrl: 'https://placehold.co/600x400/2E1065/FFFFFF?text=Free+Pizza' }, ];
const initialStampCards = [ { id: 1, vendor: 'Cafe Beans', title: 'Free Coffee', totalStamps: 10, currentStamps: 4, icon: '‚òï' }, { id: 2, vendor: 'Pizza Planet', title: 'Free Large Pizza', totalStamps: 8, currentStamps: 8, icon: 'üçï' } ];
const initialFeedback = [ { id: 1, customer: 'Ali Khan', rating: 5, comment: 'Great service and amazing pizza!', date: '2025-07-22' }, { id: 2, customer: 'Ayesha Malik', rating: 4, comment: 'The coffee was good, but the place was a bit crowded.', date: '2025-07-21' }, { id: 3, customer: 'Bilal Raja', rating: 5, comment: '', date: '2025-07-20' }, ];
const initialFaqs = [ { id: 1, question: 'How do I earn loyalty points?', answer: 'You can earn loyalty points by making purchases at participating vendors. Simply scan the QR code on your receipt using the Muffta app to have your points added to your account.' }, { id: 2, question: 'Can I redeem points from one vendor at another?', answer: 'No, loyalty points are specific to the vendor where they were earned. You can only redeem points at the same business that issued them.' }, { id: 3, question: 'What happens if I lose my receipt?', answer: 'Unfortunately, a valid receipt with a QR code is required to claim your loyalty points for offline purchases. For online purchases, points are awarded automatically.' }];

// --- Zustand Store Simulation ---
const useStore = <T,>(initialState: T): [T, React.Dispatch<React.SetStateAction<T>>] => { 
  const [store, setStore] = useState(initialState); 
  return [store, setStore]; 
};

// --- Gemini API Helper ---
const callGemini = async (prompt: string): Promise<string> => {
  let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
  const payload = { contents: chatHistory };
  const apiKey = ""; // API key is handled by the environment
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!response.ok) {
        return "Error: Could not connect to the AI service.";
    }
    const result = await response.json();
    if (result.candidates && result.candidates.length > 0 && result.candidates[0].content && result.candidates[0].content.parts && result.candidates[0].content.parts.length > 0) {
      return result.candidates[0].content.parts[0].text;
    } else {
      return "Sorry, I couldn't generate a response. Please try again.";
    }
  } catch (error) {
    console.error("Gemini API call failed:", error);
    return "Error: Failed to fetch response from the AI service.";
  }
};


// --- Helper Components ---
const Modal = ({ isOpen, onClose, children }: { isOpen: boolean, onClose: () => void, children: React.ReactNode }) => { if (!isOpen) return null; return <div className="fixed inset-0 bg-black bg-opacity-60 z-[100] flex items-center justify-center p-4" onClick={onClose}><div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl w-full max-w-md" onClick={e => e.stopPropagation()}><div className="flex justify-end p-2"><button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"><X className="w-6 h-6"/></button></div>{children}</div></div>; };
const CitySelector = ({ onSelectCity, cities }: { onSelectCity: (city: string) => void, cities: string[] }) => ( <> <div className="text-center px-6 pb-4 border-b dark:border-gray-700"><h2 className="text-2xl font-bold">Select Your City</h2></div><div className="p-6"><div className="grid grid-cols-2 sm:grid-cols-3 gap-4">{cities.map((city) => ( <button key={city} onClick={() => onSelectCity(city)} className="w-full text-center px-4 py-3 border dark:border-gray-600 rounded-lg font-medium hover:border-pink-500 hover:text-pink-600 dark:hover:border-pink-500 dark:hover:text-pink-500 transition-colors">{city}</button>))}</div></div></> );
const AuthFlow = ({ onLoginSuccess, primaryColor, secondaryColor }: { onLoginSuccess: (user: any) => void, primaryColor: string, secondaryColor: string }) => { const [step, setStep] = useState('prompt'); const [identifier, setIdentifier] = useState(''); const handleContinue = (e: React.FormEvent) => { e.preventDefault(); setStep('loading'); setTimeout(() => setStep('otp'), 1500); }; const handleVerify = (e: React.FormEvent) => { e.preventDefault(); setStep('loading'); setTimeout(() => { let userType = 'shopper'; if (identifier === 'vendor@mufta.pk') userType = 'vendor'; if (identifier === 'admin@mufta.pk') userType = 'admin'; onLoginSuccess({ name: userType === 'vendor' ? 'Pizza Planet' : userType === 'admin' ? 'Super Admin' : 'Shopper', email: identifier, type: userType }); }, 1500); }; return <div className="p-8">{step === 'loading' && <div className="flex flex-col items-center justify-center h-48"><Loader2 className="w-12 h-12 animate-spin" style={{ color: primaryColor }} /></div>}{step === 'prompt' && <><h2 className="text-2xl font-bold text-center">Login or Sign Up</h2><p className="text-center text-gray-500 mt-2">Hint: use 'vendor@mufta.pk' or 'admin@mufta.pk'</p><form onSubmit={handleContinue} className="mt-8 space-y-6"><input type="text" value={identifier} onChange={(e) => setIdentifier(e.target.value)} placeholder="Email or Phone Number" required className="w-full px-4 py-3 border dark:border-gray-600 bg-transparent rounded-lg focus:ring-2 focus:ring-pink-500" /><button type="submit" className="w-full py-3 text-white font-semibold rounded-lg" style={{ backgroundColor: primaryColor }}>Continue</button></form></>}{step === 'otp' && <><h2 className="text-2xl font-bold text-center">Verify Your Identity</h2><p className="text-center mt-2">An OTP was sent to <span className="font-semibold">{identifier}</span></p><form onSubmit={handleVerify} className="mt-8 space-y-6"><div className="flex justify-center space-x-2">{[...Array(6)].map((_, i) => <input key={i} type="text" maxLength={1} className="w-12 h-14 text-center text-2xl font-bold border dark:border-gray-600 bg-transparent rounded-lg focus:ring-2 focus:ring-pink-500" />)}</div><button type="submit" className="w-full py-3 text-white font-semibold rounded-lg" style={{ backgroundColor: secondaryColor }}>Verify OTP</button></form></>}</div>; };
const UserProfile = ({ user, onLogout, navigateTo }: { user: any, onLogout: () => void, navigateTo: (page: string) => void }) => { const [isOpen, setIsOpen] = useState(false); return <div className="relative"><button onClick={() => setIsOpen(!isOpen)} className="flex items-center space-x-2 p-2 rounded-full bg-gray-100 dark:bg-gray-700"><User className="w-6 h-6" /><ChevronDown className={`w-5 h-5 transition-transform ${isOpen ? 'rotate-180' : ''}`} /></button>{isOpen && <div className="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 z-50 ring-1 ring-black ring-opacity-5"><div className="px-4 py-3 border-b dark:border-gray-700"><p className="font-semibold">{user.name}</p><p className="text-xs text-gray-500 dark:text-gray-400 capitalize">{user.type} Account</p></div>{user.type === 'vendor' ? (<button onClick={() => {setIsOpen(false); navigateTo('vendor_dashboard');}} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700"><LayoutDashboard className="w-4 h-4"/>Vendor Dashboard</button>) : user.type === 'admin' ? (<button onClick={() => {setIsOpen(false); navigateTo('admin_dashboard');}} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700"><Shield className="w-4 h-4"/>Admin Panel</button>) : (<><button onClick={() => {setIsOpen(false); navigateTo('orders');}} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700"><ShoppingCart className="w-4 h-4"/>My Orders</button><button onClick={() => {setIsOpen(false); navigateTo('favorites');}} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700"><Heart className="w-4 h-4"/>My Favorites</button><button onClick={() => {setIsOpen(false); navigateTo('loyalty');}} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700"><Award className="w-4 h-4"/>Loyalty & Points</button></>)}<button onClick={onLogout} className="w-full text-left flex items-center gap-3 px-4 py-2 text-sm text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700"><LogOut className="w-4 h-4" /><span>Logout</span></button></div>}</div>; };
const CartSidebar = ({ isOpen, onClose, cart, updateQuantity, removeFromCart, primaryColor, handleCheckout }: { isOpen: boolean, onClose: () => void, cart: any[], updateQuantity: (id: number, q: number) => void, removeFromCart: (id: number) => void, primaryColor: string, handleCheckout: () => void }) => { const subtotal = useMemo(() => cart.reduce((acc, item) => acc + item.price * item.quantity, 0), [cart]); return <><div className={`fixed inset-0 bg-black z-[90] transition-opacity ${isOpen ? 'bg-opacity-60' : 'bg-opacity-0 pointer-events-none'}`} onClick={onClose}></div><div className={`fixed top-0 right-0 h-full w-full max-w-md bg-white dark:bg-gray-800 shadow-2xl z-[100] transform transition-transform ${isOpen ? 'translate-x-0' : 'translate-x-full'} flex flex-col`}><div className="flex items-center justify-between p-6 border-b dark:border-gray-700"><h2 className="text-2xl font-bold">Your Cart</h2><button onClick={onClose} className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"><X /></button></div>{cart.length === 0 ? <div className="flex-grow flex flex-col items-center justify-center"><ShoppingCart className="w-24 h-24 text-gray-300 dark:text-gray-600" /><h3 className="mt-4 text-xl font-semibold">Your cart is empty</h3><button onClick={onClose} className="mt-6 px-6 py-3 font-semibold text-white rounded-lg" style={{backgroundColor: primaryColor}}>Start Shopping</button></div> : <><div className="flex-grow overflow-y-auto p-6 space-y-4">{cart.map(item => <div key={item.id} className="flex items-start space-x-4"><img src={item.imageUrl} alt={item.title} className="w-20 h-20 rounded-lg object-cover" /><div className="flex-grow"><h4 className="font-semibold">{item.title}</h4><p className="text-sm text-gray-500 dark:text-gray-400">{item.vendor}</p><p className="text-sm font-bold mt-1" style={{color: primaryColor}}>{item.price === 0 ? 'Free' : `PKR ${item.price}`}</p></div><div className="flex flex-col items-end space-y-2"><div className="flex items-center border dark:border-gray-600 rounded-md"><button onClick={() => updateQuantity(item.id, item.quantity - 1)} className="p-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-l-md"><Minus className="w-4 h-4" /></button><span className="px-3 text-sm">{item.quantity}</span><button onClick={() => updateQuantity(item.id, item.quantity + 1)} className="p-1.5 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-r-md"><Plus className="w-4 h-4" /></button></div><button onClick={() => removeFromCart(item.id)} className="text-gray-400 hover:text-red-500"><Trash2 className="w-4 h-4" /></button></div></div>)}</div><div className="p-6 border-t dark:border-gray-700"><div className="flex justify-between items-center text-lg font-semibold"><span>Subtotal</span><span>PKR {subtotal.toFixed(2)}</span></div><button onClick={handleCheckout} className="w-full mt-4 py-3 text-white font-bold rounded-lg text-lg" style={{backgroundColor: primaryColor}}>Proceed to Checkout</button></div></> }</div></>; };
const DealCard = ({ deal, onAddToCart, isInCart, primaryColor, onCardClick }: { deal: any, onAddToCart: (deal: any) => void, isInCart: boolean, primaryColor: string, onCardClick: (id: number) => void }) => ( <div onClick={() => onCardClick(deal.id)} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden group transform hover:-translate-y-2 transition-transform flex flex-col cursor-pointer"><div className="relative"><img src={deal.imageUrl} alt={deal.title} className="w-full h-48 object-cover" /><div className="absolute top-2 left-2 bg-pink-100 text-pink-800 text-xs font-semibold px-2 py-1 rounded-full">{deal.type}</div></div><div className="p-4 flex flex-col flex-grow"><p className="text-sm font-medium text-gray-500 dark:text-gray-400">{deal.vendor}</p><h3 className="mt-1 text-lg font-semibold flex-grow">{deal.title}</h3><div className="mt-4 flex justify-between items-center"><p className="text-lg font-bold" style={{color: primaryColor}}>{deal.price === 0 ? 'Free' : `PKR ${deal.price}`}</p><button onClick={(e) => { e.stopPropagation(); if (!isInCart) onAddToCart(deal); }} disabled={isInCart} className={`px-3 py-2 text-sm font-medium text-white rounded-md transition-colors ${isInCart ? 'bg-green-500 cursor-not-allowed' : 'hover:bg-pink-700'}`} style={!isInCart ? {backgroundColor: primaryColor} : {}}>{isInCart ? <CheckCircle className="w-5 h-5"/> : <Plus className="w-5 h-5"/>}</button></div></div></div> );
const InstallPwaPrompt = ({ onInstall, onDismiss }: { onInstall: () => void, onDismiss: () => void }) => ( <div className="fixed bottom-0 left-0 right-0 z-50 p-4 animate-slide-up"><div className="max-w-xl mx-auto bg-gray-800 text-white rounded-2xl shadow-2xl flex items-center justify-between p-4"><div className="flex items-center space-x-4"><div className="bg-pink-600 p-3 rounded-xl"><ThumbsUp className="w-6 h-6 text-white"/></div><div><h4 className="font-bold">Get the Full Experience!</h4><p className="text-sm text-gray-300">Install Mufta on your device for faster access.</p></div></div><div className="flex items-center space-x-3"><button onClick={onDismiss} className="text-sm font-medium px-4 py-2 rounded-lg hover:bg-gray-700">Later</button><button onClick={onInstall} className="flex items-center gap-2 text-sm font-bold px-4 py-2 rounded-lg bg-pink-600 hover:bg-pink-700"><Download className="w-4 h-4"/>Install</button></div></div><style>{`@keyframes slide-up { from { transform: translateY(100%); } to { transform: translateY(0); } } .animate-slide-up { animation: slide-up 0.5s ease-out forwards; }`}</style></div> );
const DealCardSkeleton = () => ( <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden animate-pulse"><div className="w-full h-48 bg-gray-300 dark:bg-gray-700"></div><div className="p-4"><div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/3 mb-2"></div><div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-full mb-4"></div><div className="flex justify-between items-center"><div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-1/4"></div><div className="h-8 bg-gray-300 dark:bg-gray-700 rounded w-1/3"></div></div></div></div> );

// --- Page Components ---
const HomePage = ({ setPage, deals, onAddToCart, cart, primaryColor, navigateToDeal, navigateTo, categories, isLoading, currentCity }: { setPage: (page: any) => void, deals: any[], onAddToCart: (deal: any) => void, cart: any[], primaryColor: string, navigateToDeal: (id: number) => void, navigateTo: (page: string) => void, categories: any[], isLoading: boolean, currentCity: string }) => ( <> <section className="relative py-20 md:py-32 bg-gray-800 text-white text-center" style={{backgroundImage: 'linear-gradient(rgba(46, 16, 101, 0.8), rgba(46, 16, 101, 0.8)), url(https://placehold.co/1200x400/FF3366/FFFFFF?text=Mufta+Banner)'}}><h1 className="text-4xl md:text-5xl font-extrabold">Welcome to Muffta in {currentCity}!</h1><p className="mt-4 text-lg text-gray-300">Your one-stop shop for the best deals and rewards.</p></section> <section className="py-16 bg-white dark:bg-gray-800"><div className="max-w-7xl mx-auto px-4"><div className="text-center"><h2 className="text-3xl font-extrabold">What are you looking for?</h2></div><div className="mt-12 grid gap-5 grid-cols-2 sm:grid-cols-3 lg:grid-cols-5">{categories.map((cat) => ( <button key={cat.id} onClick={() => setPage(cat.id)} className="group flex flex-col items-center justify-center p-6 bg-gray-100 dark:bg-gray-700 rounded-lg shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all"><div className="p-4 rounded-full" style={{backgroundColor: primaryColor, color: 'white'}}>{React.cloneElement(cat.icon, {})}</div><p className="mt-4 text-lg font-semibold">{cat.name}</p></button>))}</div></div></section> <section className="py-16 bg-gray-50 dark:bg-gray-900"><div className="max-w-7xl mx-auto px-4"><div className="flex justify-between items-center mb-12"><h2 className="text-3xl font-extrabold">Top Deals in {deals[0]?.city || '...'}</h2><button onClick={() => navigateTo('coupons')} className="text-lg font-semibold" style={{color: primaryColor}}>View All &rarr;</button></div><div className="grid gap-8 md:grid-cols-2 lg:grid-cols-4">{isLoading ? Array.from({length: 4}).map((_, i) => <DealCardSkeleton key={i} />) : deals.slice(0, 4).map((deal) => <DealCard key={deal.id} deal={deal} onAddToCart={onAddToCart} isInCart={cart.some(item => item.id === deal.id)} primaryColor={primaryColor} onCardClick={navigateToDeal} />)}</div></div></section><section className="py-20" style={{backgroundColor: primaryColor}}><div className="max-w-4xl mx-auto text-center px-4"><h2 className="text-3xl font-extrabold text-white sm:text-4xl">Got a Business? Reach Thousands of Shoppers</h2><p className="mt-4 text-lg text-pink-100">Join Mufta to list your deals, attract new customers, and grow your sales. It's free to get started.</p><button onClick={() => navigateTo('vendor_register')} className="mt-8 inline-block bg-white text-pink-600 font-bold py-3 px-8 rounded-lg shadow-lg hover:bg-gray-100">Become a Vendor</button></div></section> </> );
const CouponsPage = ({ deals, onAddToCart, cart, primaryColor, city, navigateToDeal }: { deals: any[], onAddToCart: (deal: any) => void, cart: any[], primaryColor: string, city: string, navigateToDeal: (id: number) => void }) => { const [searchTerm, setSearchTerm] = useState(''); const filteredDeals = deals.filter(deal => deal.title.toLowerCase().includes(searchTerm.toLowerCase())); return <div className="max-w-7xl mx-auto px-4 py-12"><div className="text-center"><h1 className="text-4xl font-extrabold">Free Coupons in <span style={{color: primaryColor}}>{city}</span></h1></div><div className="my-8 sticky top-20 z-10 bg-gray-50/80 dark:bg-gray-900/80 backdrop-blur-sm py-4 rounded-lg"><div className="relative"><Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" /><input type="text" placeholder="Search for coupons..." className="w-full pl-12 pr-4 py-3 border dark:border-gray-600 bg-transparent rounded-lg focus:ring-2 focus:ring-pink-500" value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} /></div></div>{filteredDeals.length > 0 ? <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">{filteredDeals.map((deal) => <DealCard key={deal.id} deal={deal} onAddToCart={onAddToCart} isInCart={cart.some(item => item.id === deal.id)} primaryColor={primaryColor} onCardClick={navigateToDeal} />)}</div> : <div className="text-center py-16"><h3 className="text-2xl font-semibold">No Coupons Found</h3></div>}</div>; };
const DealDetailPage = ({ deal, onAddToCart, isInCart, primaryColor, toggleWishlist, isWishlisted, currentUser, openAuthModal }: { deal: any, onAddToCart: (deal: any) => void, isInCart: boolean, primaryColor: string, toggleWishlist: (id: number) => void, isWishlisted: boolean, currentUser: any, openAuthModal: () => void }) => { const [summary, setSummary] = useState(''); const [isSummaryLoading, setIsSummaryLoading] = useState(false); const handleGenerateSummary = async () => { setIsSummaryLoading(true); const prompt = `Summarize the following deal in 3 short bullet points for a shopper. Use emojis. Deal Title: "${deal.title}", Description: "${deal.description}", Rules: "${deal.rules}".`; const result = await callGemini(prompt); setSummary(result); setIsSummaryLoading(false); }; if (!deal) return <div className="text-center py-20">Deal not found.</div>; const handleWishlistClick = () => { if(currentUser) { toggleWishlist(deal.id); } else { openAuthModal(); } }; return <div className="bg-white dark:bg-gray-800"><div className="max-w-7xl mx-auto px-4 py-12"><div className="grid md:grid-cols-2 gap-12 items-start"><div><img src={deal.imageUrl} alt={deal.title} className="w-full rounded-2xl shadow-xl aspect-video object-cover"/></div><div className="space-y-6"><span className="inline-block bg-pink-100 text-pink-800 text-sm font-semibold px-3 py-1 rounded-full">{deal.type}</span><h1 className="text-4xl font-extrabold">{deal.title}</h1><p className="text-lg text-gray-500 dark:text-gray-400">Offered by <span className="font-semibold" style={{color: primaryColor}}>{deal.vendor}</span></p><div className="mt-4 p-4 border dark:border-gray-700 rounded-lg bg-gray-50 dark:bg-gray-700/20"><button onClick={handleGenerateSummary} disabled={isSummaryLoading} className="flex items-center gap-2 font-semibold text-pink-600 disabled:opacity-50">{isSummaryLoading ? <Loader2 className="animate-spin w-5 h-5"/> : <Sparkles className="w-5 h-5"/>}{isSummaryLoading ? 'Generating...' : '‚ú® Quick Summary'}</button>{summary && <div className="mt-2 text-sm text-gray-700 dark:text-gray-300 whitespace-pre-wrap">{summary}</div>}</div><div className="mt-6"><h3 className="text-xl font-bold mb-2">Description</h3><p className="text-gray-600 dark:text-gray-300">{deal.description}</p></div><div className="mt-6"><h3 className="text-xl font-bold mb-2">Rules & Conditions</h3><p className="text-sm text-gray-500 dark:text-gray-400">{deal.rules}</p></div><div className="mt-8 flex flex-col sm:flex-row gap-4"><button onClick={() => !isInCart && onAddToCart(deal)} disabled={isInCart} className={`w-full flex items-center justify-center gap-2 py-4 px-6 text-lg font-bold text-white rounded-lg transition-colors ${isInCart ? 'bg-green-500 cursor-not-allowed' : 'hover:bg-pink-700'}`} style={!isInCart ? {backgroundColor: primaryColor} : {}}>{isInCart ? <><CheckCircle/> Added</> : `Grab for ${deal.price === 0 ? 'Free' : `PKR ${deal.price}`}`}</button><button onClick={handleWishlistClick} className={`w-full sm:w-auto flex items-center justify-center gap-2 py-4 px-6 text-lg font-bold rounded-lg border-2 ${isWishlisted ? 'border-pink-500 bg-pink-50 text-pink-600 dark:bg-pink-900/20' : 'border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700'}`}><Heart className={`w-6 h-6 transition-all ${isWishlisted ? 'fill-current' : ''}`} /></button></div></div></div></div></div>; };
const FavoritesPage = ({ wishlist, onAddToCart, cart, primaryColor, navigateToDeal, removeWishlist }: { wishlist: any[], onAddToCart: (deal: any) => void, cart: any[], primaryColor: string, navigateToDeal: (id: number) => void, removeWishlist: (id: number) => void }) => ( <div className="max-w-7xl mx-auto px-4 py-12"><div className="text-center mb-12"><h1 className="text-4xl font-extrabold">My Favorites</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Deals you've saved for later.</p></div>{wishlist.length > 0 ? <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">{wishlist.map((deal) => ( <div key={deal.id} className="relative group"><DealCard deal={deal} onAddToCart={onAddToCart} isInCart={cart.some(item => item.id === deal.id)} primaryColor={primaryColor} onCardClick={navigateToDeal} /><button onClick={() => removeWishlist(deal.id)} className="absolute top-2 right-2 bg-black/50 p-2 rounded-full text-white hover:bg-red-500 opacity-0 group-hover:opacity-100 transition-opacity"><Trash2 className="w-5 h-5"/></button></div>))}</div> : <div className="text-center py-16 border-2 border-dashed dark:border-gray-700 rounded-lg"><Heart className="mx-auto h-12 w-12 text-gray-400" /><h3 className="mt-2 text-xl font-semibold">Nothing saved yet!</h3><p className="mt-1 text-gray-500 dark:text-gray-400">Click the heart icon on a deal to save it here.</p></div>}</div> );
const OrdersPage = ({ orders, primaryColor }: { orders: any[], primaryColor: string }) => { const getStatusColor = (status: string) => { switch (status) { case 'Delivered': return 'bg-green-100 text-green-800'; case 'Processing': return 'bg-yellow-100 text-yellow-800'; case 'Cancelled': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; return <div className="max-w-7xl mx-auto px-4 py-12"><div className="text-center mb-12"><h1 className="text-4xl font-extrabold">My Orders</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Your history of purchased deals and vouchers.</p></div>{orders.length > 0 ? <div className="space-y-8">{orders.map((order) => ( <div key={order.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden"><div className="p-4 bg-gray-50 dark:bg-gray-700/50 flex flex-col md:flex-row justify-between items-start md:items-center gap-4"><div className="flex-grow"><p className="font-semibold text-lg">Order ID: <span className="font-mono" style={{color: primaryColor}}>#{order.id}</span></p><p className="text-sm text-gray-500 dark:text-gray-400">Date: {order.date}</p></div><div className="flex items-center gap-4"><span className={`px-3 py-1 text-sm font-semibold rounded-full ${getStatusColor(order.status)}`}>{order.status}</span><button className="text-sm font-semibold" style={{color: primaryColor}}>View Details <ChevronRight className="inline w-4 h-4"/></button></div></div><div className="p-4 space-y-4 divide-y dark:divide-gray-700">{order.items.map((item: any) => ( <div key={item.id} className="flex items-center gap-4 pt-4 first:pt-0"><img src={item.imageUrl} alt={item.title} className="w-16 h-16 rounded-md object-cover"/><div><p className="font-semibold">{item.title}</p><p className="text-sm text-gray-500 dark:text-gray-400">Qty: {item.quantity}</p></div><p className="ml-auto font-semibold">PKR {(item.price * item.quantity).toFixed(2)}</p></div>))}</div></div>))}</div> : <div className="text-center py-16 border-2 border-dashed dark:border-gray-700 rounded-lg"><Package className="mx-auto h-12 w-12 text-gray-400" /><h3 className="mt-2 text-xl font-semibold">No orders yet!</h3><p className="mt-1 text-gray-500 dark:text-gray-400">Your purchased deals will appear here.</p></div>}</div>; };
const SpinsPage = ({ primaryColor, secondaryColor }: { primaryColor: string, secondaryColor: string }) => { const segments = [ { text: "10% Off", color: "#FF3366" }, { text: "Try Again", color: "#2E1065" }, { text: "Free Drink", color: "#FFC700" }, { text: "20% Off", color: "#FF3366" }, { text: "Better Luck!", color: "#2E1065" }, { text: "Free Fries", color: "#FFC700" }, { text: "50% Off", color: "#FF3366" }, { text: "Nothing", color: "#2E1065" }, ]; const [isSpinning, setIsSpinning] = useState(false); const [rotation, setRotation] = useState(0); const [result, setResult] = useState(null); const handleSpin = () => { if (isSpinning) return; setIsSpinning(true); setResult(null); const randomSegment = Math.floor(Math.random() * segments.length); const prize = segments[randomSegment]; const degreesPerSegment = 360 / segments.length; const prizeAngle = randomSegment * degreesPerSegment; const randomOffset = (Math.random() - 0.5) * degreesPerSegment * 0.8; const finalAngle = 360 * 5 + prizeAngle + randomOffset; setRotation(finalAngle); setTimeout(() => { setIsSpinning(false); setResult(prize.text); }, 5000); }; return <div className="max-w-4xl mx-auto px-4 py-12 text-center"><h1 className="text-4xl font-extrabold">Spin to Win!</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Try your luck with our daily spin. You might win an amazing prize!</p><div className="relative w-80 h-80 md:w-96 md:h-96 mx-auto my-12 flex items-center justify-center"><div className="absolute w-full h-full transition-transform duration-[5000ms] ease-out" style={{ transform: `rotate(${rotation}deg)` }}>{segments.map((segment, index) => ( <div key={index} className="absolute w-1/2 h-1/2 origin-bottom-right" style={{ transform: `rotate(${index * (360 / segments.length)}deg)` }}><div className="absolute -left-full w-full h-full skew-y-[30deg] origin-top-right" style={{ transform: `rotate(${-(360 / segments.length) / 2}deg)`, backgroundColor: segment.color, color: segment.color === '#2E1065' ? 'white' : 'black' }}><span className="absolute w-full h-full flex items-center justify-center text-sm font-bold" style={{transform: `skewY(-30deg) rotate(${(360 / segments.length) / 2}deg)`}}>{segment.text}</span></div></div>))}</div><div className="absolute w-12 h-12 bg-white rounded-full border-4 border-gray-800 z-10"></div><div className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-2 w-0 h-0 border-x-8 border-x-transparent border-b-[16px] border-b-gray-800 z-20"></div></div>{result && <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg mb-8"><p className="font-bold">Congratulations!</p><p>You won: {result}</p></div>}<button onClick={handleSpin} disabled={isSpinning} className="flex items-center justify-center gap-3 w-full max-w-xs mx-auto py-4 px-6 text-xl font-bold text-white rounded-lg shadow-lg transition-transform hover:scale-105 disabled:opacity-50" style={{ backgroundColor: secondaryColor }}>{isSpinning ? <Loader2 className="animate-spin" /> : <RotateCw />}{isSpinning ? 'Spinning...' : 'Spin the Wheel'}</button><p className="text-sm text-gray-500 dark:text-gray-400 mt-4">You have 1 free spin remaining today.</p></div>; };
const ScratchesPage = ({ primaryColor }: { primaryColor: string }) => { const canvasRef = useRef<HTMLCanvasElement>(null); const [isScratched, setIsScratched] = useState(false); const [prize, setPrize] = useState("Better Luck Next Time!"); const prizes = ["Free Burger", "20% Off", "Try Again", "Free Ice Cream"]; const setupCanvas = () => { const canvas = canvasRef.current; if (!canvas) return; const ctx = canvas.getContext('2d'); const rect = canvas.getBoundingClientRect(); canvas.width = rect.width; canvas.height = rect.height; ctx.fillStyle = '#c0c0c0'; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.globalCompositeOperation = 'destination-out'; }; useEffect(() => { setPrize(prizes[Math.floor(Math.random() * prizes.length)]); setupCanvas(); window.addEventListener('resize', setupCanvas); return () => window.removeEventListener('resize', setupCanvas); }, []); const handleScratch = (e: any) => { const canvas = canvasRef.current; if (!canvas || isScratched) return; const ctx = canvas.getContext('2d'); const rect = canvas.getBoundingClientRect(); const pos = { x: (e.clientX || e.touches[0].clientX) - rect.left, y: (e.clientY || e.touches[0].clientY) - rect.top }; ctx.beginPath(); ctx.arc(pos.x, pos.y, 20, 0, 2 * Math.PI); ctx.fill(); checkScratchCompletion(); }; const checkScratchCompletion = () => { const canvas = canvasRef.current; if (!canvas) return; const ctx = canvas.getContext('2d'); const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height); const pixelData = imageData.data; let transparentPixels = 0; for (let i = 3; i < pixelData.length; i += 4) { if (pixelData[i] === 0) { transparentPixels++; } } const percentage = (transparentPixels / (canvas.width * canvas.height)) * 100; if (percentage > 50) { setIsScratched(true); } }; const resetCard = () => { setIsScratched(false); setPrize(prizes[Math.floor(Math.random() * prizes.length)]); setTimeout(setupCanvas, 0); }; return <div className="max-w-4xl mx-auto px-4 py-12 text-center"><h1 className="text-4xl font-extrabold">Scratch & Win!</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Scratch the card to reveal your prize. Good luck!</p><div className="relative w-full max-w-md h-64 mx-auto my-12 rounded-2xl shadow-xl overflow-hidden bg-yellow-300 dark:bg-yellow-600"><div className="absolute inset-0 flex items-center justify-center"><p className="text-3xl font-bold text-yellow-800 dark:text-yellow-100">{prize}</p></div><canvas ref={canvasRef} className={`absolute inset-0 w-full h-full cursor-grab ${isScratched ? 'opacity-0 transition-opacity duration-500' : ''}`} onMouseDown={(e) => { const target = e.currentTarget; const moveHandler = (moveEvent: any) => handleScratch(moveEvent); target.addEventListener('mousemove', moveHandler); target.addEventListener('mouseup', () => target.removeEventListener('mousemove', moveHandler), { once: true }); }} onTouchMove={handleScratch} /></div>{isScratched && <div className="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg mb-8"><p className="font-bold">You revealed the prize!</p><p>You got: {prize}</p></div>}<button onClick={resetCard} className="flex items-center justify-center gap-3 w-full max-w-xs mx-auto py-4 px-6 text-xl font-bold text-white rounded-lg shadow-lg transition-transform hover:scale-105" style={{ backgroundColor: primaryColor }}><Star />Get New Card</button><p className="text-sm text-gray-500 dark:text-gray-400 mt-4">You have 2 free scratch cards remaining today.</p></div>; };
const DrawsPage = ({ draws, primaryColor, secondaryColor, userEntries, enterDraw }: { draws: any[], primaryColor: string, secondaryColor: string, userEntries: any, enterDraw: (id: number) => void }) => {
    const Countdown = ({ endDate }: { endDate: Date }) => {
        const calculateTimeLeft = (): TimeLeft => {
            const difference = +new Date(endDate) - +new Date();
            if (difference > 0) {
                return { days: Math.floor(difference / (1000 * 60 * 60 * 24)), hours: Math.floor((difference / (1000 * 60 * 60)) % 24), minutes: Math.floor((difference / 1000 / 60) % 60), seconds: Math.floor((difference / 1000) % 60) };
            }
            return { days: 0, hours: 0, minutes: 0, seconds: 0 };
        };
        const [timeLeft, setTimeLeft] = useState<TimeLeft>(calculateTimeLeft());
        useEffect(() => { const timer = setTimeout(() => setTimeLeft(calculateTimeLeft()), 1000); return () => clearTimeout(timer); });
        
        const timerComponents = Object.entries(timeLeft).map(([interval, value]) => {
             if (value === 0 && interval !== 'seconds' && timeLeft.days === 0 && (interval !== 'minutes' || timeLeft.hours === 0)) return null;
            return <div key={interval} className="flex flex-col items-center"><span className="text-2xl font-bold">{String(value).padStart(2, '0')}</span><span className="text-xs uppercase">{interval}</span></div>;
        }).filter(Boolean);
        
        return timerComponents.length ? <div className="flex gap-4">{timerComponents}</div> : <span>Draw has ended!</span>;
    };

    return <div className="max-w-7xl mx-auto px-4 py-12"><div className="text-center mb-12"><h1 className="text-4xl font-extrabold tracking-tight">Prize Draws</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Enter for a chance to win amazing prizes from top vendors!</p></div><div className="grid md:grid-cols-2 gap-8">{draws.map(draw => { const myEntries = userEntries[draw.id] || 0; return ( <div key={draw.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden flex flex-col"><img src={draw.imageUrl} alt={draw.title} className="w-full h-64 object-cover"/><div className="p-6 flex flex-col flex-grow"><h3 className="text-2xl font-bold">{draw.title}</h3><p className="text-sm text-gray-500 dark:text-gray-400">by {draw.vendor}</p><div className="my-6 flex-grow flex flex-col items-center justify-center bg-gray-100 dark:bg-gray-700 p-4 rounded-lg"><p className="text-sm uppercase font-semibold text-gray-500 dark:text-gray-400">Draw Ends In</p><div className="text-gray-900 dark:text-white mt-2"><Countdown endDate={draw.endDate}/></div></div><div className="flex justify-between items-center text-sm my-4"><div className="flex items-center gap-2 text-gray-600 dark:text-gray-300"><Users className="w-5 h-5 text-gray-400"/><p>1,234 Entries</p></div>{myEntries > 0 && <div className="font-semibold bg-green-100 text-green-800 px-2 py-1 rounded-full">You have {myEntries} entries</div>}</div><button onClick={() => enterDraw(draw.id)} className="w-full py-3 text-lg font-bold text-white rounded-lg shadow-md transition-transform hover:scale-105" style={{backgroundColor: secondaryColor}}>Enter Draw (PKR {draw.price})</button></div></div> )})}</div></div>;
};
const VendorRegistrationPage = ({ primaryColor, secondaryColor, navigateTo }: { primaryColor: string, secondaryColor: string, navigateTo: (page: string) => void }) => {
    const [step, setStep] = useState(1);
    const [vendorType, setVendorType] = useState<'offline' | 'online' | null>(null);

    const FileInput = ({ label, icon }: { label: string, icon: React.ReactNode }) => {
        const [fileName, setFileName] = useState('');
        return (
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{label}</label>
                <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md">
                    <div className="space-y-1 text-center">
                        {icon}
                        <div className="flex text-sm text-gray-600 dark:text-gray-400">
                            <label htmlFor="file-upload" className="relative cursor-pointer bg-white dark:bg-gray-800 rounded-md font-medium text-pink-600 hover:text-pink-500">
                                <span>Upload a file</span>
                                <input id="file-upload" name="file-upload" type="file" className="sr-only" onChange={(e) => setFileName(e.target.files?.[0]?.name || '')} />
                            </label>
                            <p className="pl-1">or drag and drop</p>
                        </div>
                        <p className="text-xs text-gray-500 dark:text-gray-400">{fileName || 'PNG, JPG, PDF up to 5MB'}</p>
                    </div>
                </div>
            </div>
        );
    };

    const renderStep = () => {
        switch (step) {
            case 1:
                return (
                    <>
                        <h2 className="text-2xl font-bold text-center">Join Our Vendor Network</h2>
                        <p className="text-center text-gray-500 dark:text-gray-400 mt-2">Are you a physical store or an online business?</p>
                        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                            <button onClick={() => { setVendorType('offline'); setStep(2); }} className="flex flex-col items-center justify-center p-8 border-2 dark:border-gray-600 rounded-lg hover:border-pink-500 hover:bg-pink-50 dark:hover:bg-pink-900/20 transition-colors">
                                <Store className="w-12 h-12 mb-4" style={{ color: primaryColor }} />
                                <h3 className="text-xl font-semibold">Offline Store</h3>
                                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">Physical shop, restaurant, etc.</p>
                            </button>
                            <button onClick={() => { setVendorType('online'); setStep(2); }} className="flex flex-col items-center justify-center p-8 border-2 dark:border-gray-600 rounded-lg hover:border-pink-500 hover:bg-pink-50 dark:hover:bg-pink-900/20 transition-colors">
                                <Globe2 className="w-12 h-12 mb-4" style={{ color: primaryColor }} />
                                <h3 className="text-xl font-semibold">Online Business</h3>
                                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">E-commerce, Shopify store, etc.</p>
                            </button>
                        </div>
                    </>
                );
            case 2:
                return (
                        <>
                            <h2 className="text-2xl font-bold text-center">{vendorType === 'offline' ? 'Offline' : 'Online'} Vendor Details</h2>
                            <p className="text-center text-gray-500 dark:text-gray-400 mt-2">Please provide your business details and documents for verification.</p>
                            <form className="mt-8 space-y-6">
                                <div className="space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Business Name</label>
                                        <input type="text" required className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg" placeholder="e.g., Pizza Planet" />
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Mobile Number</label>
                                        <input type="tel" required className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg" placeholder="e.g., 03001234567" />
                                    </div>
                                </div>
                                <FileInput label="Trade License" icon={<FileText className="mx-auto h-12 w-12 text-gray-400" />} />
                                <FileInput label="CNIC (Front & Back)" icon={<User className="mx-auto h-12 w-12 text-gray-400" />} />
                                {vendorType === 'offline' && <FileInput label="Shop Front Photo" icon={<Camera className="mx-auto h-12 w-12 text-gray-400" />} />}
                                <div className="p-4 bg-gray-100 dark:bg-gray-700 rounded-lg text-center text-sm text-gray-600 dark:text-gray-300">
                                    Captcha Placeholder: In a real app, a Google reCAPTCHA would be here to prevent spam.
                                </div>
                                <button type="submit" className="w-full py-3 text-lg font-bold text-white rounded-lg shadow-md" style={{ backgroundColor: secondaryColor }}>Submit for Review</button>
                            </form>
                        </>
                    );
        }
    };

    return <div className="max-w-4xl mx-auto px-4 py-12"><div className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-2xl">{step > 1 && <button onClick={() => setStep(step - 1)} className="flex items-center gap-2 text-sm font-medium text-gray-600 dark:text-gray-300 mb-6 hover:text-pink-600"><ArrowLeft className="w-4 h-4" /> Back</button>}{renderStep()}</div></div>;
};
const VendorDashboardPage = ({ vendor, vendorDeals, vendorOrders, primaryColor, secondaryColor, navigateTo }: { vendor: any, vendorDeals: any[], vendorOrders: any[], primaryColor: string, secondaryColor: string, navigateTo: (page: string) => void }) => { const [activeTab, setActiveTab] = useState('overview'); const tabs = [{id: 'overview', name: 'Overview', icon: <LayoutDashboard/>}, {id: 'services', name: 'My Services', icon: <Tag/>}, {id: 'orders', name: 'Orders', icon: <ShoppingCart/>} ]; const Overview = () => { const kpiData = [ { title: 'Total Views', value: '12,450', change: '+12.5%', icon: <Eye className="w-8 h-8"/>, color: 'text-blue-500' }, { title: 'Total Clicks', value: '3,820', change: '+8.2%', icon: <MousePointerClick className="w-8 h-8"/>, color: 'text-green-500' }, { title: 'GMV (Last 30d)', value: 'PKR 85,600', change: '+21.0%', icon: <BarChart2 className="w-8 h-8"/>, color: 'text-yellow-500' }, { title: 'Wallet Balance', value: 'PKR 5,000', change: '', icon: <Wallet className="w-8 h-8"/>, color: 'text-pink-500' }, ]; return <> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">{kpiData.map(kpi => ( <div key={kpi.title} className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg flex items-start justify-between"><div><p className="text-sm font-medium text-gray-500 dark:text-gray-400">{kpi.title}</p><p className="text-3xl font-bold mt-2">{kpi.value}</p>{kpi.change && <p className="text-sm text-green-500 mt-1">{kpi.change}</p>}</div><div className={`p-3 rounded-lg bg-gray-100 dark:bg-gray-700 ${kpi.color}`}>{kpi.icon}</div></div>))}</div><div className="mt-12"><h2 className="text-2xl font-bold mb-4">Quick Actions</h2><div className="grid grid-cols-1 md:grid-cols-3 gap-6"><button onClick={() => navigateTo('create_deal')} className="flex flex-col items-center justify-center p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all"><Plus className="w-10 h-10 mb-2" style={{color: primaryColor}} /><p className="font-semibold">Create New Deal</p></button><button className="flex flex-col items-center justify-center p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all"><UploadCloud className="w-10 h-10 mb-2" style={{color: primaryColor}} /><p className="font-semibold">Upload Media</p></button><button className="flex flex-col items-center justify-center p-8 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all"><BarChart2 className="w-10 h-10 mb-2" style={{color: primaryColor}} /><p className="font-semibold">View Analytics</p></button></div></div> </>; }; const Services = () => { const getStatusColor = (status: string) => status === 'Active' ? 'bg-green-100 text-green-800' : status === 'Paused' ? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'; return <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b dark:border-gray-700"><th className="p-4">Service</th><th className="p-4">Status</th><th className="p-4">Stock/Sold</th><th className="p-4">Price</th><th className="p-4"></th></tr></thead><tbody>{vendorDeals.map(deal => (<tr key={deal.id} className="border-b dark:border-gray-700 last:border-none hover:bg-gray-50 dark:hover:bg-gray-700/50"> <td className="p-4 font-medium">{deal.title}</td> <td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(deal.status)}`}>{deal.status}</span></td> <td className="p-4">{deal.stock - deal.sold} / {deal.stock}</td> <td className="p-4">PKR {deal.price}</td> <td className="p-4"><button className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600"><MoreVertical className="w-5 h-5"/></button></td> </tr>))}</tbody></table></div>; }; const Orders = () => ( <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-x-auto"><table className="w-full text-left"><thead><tr className="border-b dark:border-gray-700"><th className="p-4">Order ID</th><th className="p-4">Customer</th><th className="p-4">Service</th><th className="p-4">Date</th><th className="p-4">Status</th></tr></thead><tbody>{vendorOrders.map(order => (<tr key={order.id} className="border-b dark:border-gray-700 last:border-none hover:bg-gray-50 dark:hover:bg-gray-700/50"> <td className="p-4 font-mono text-pink-600">#{order.id}</td> <td className="p-4 font-medium">{order.customer}</td> <td className="p-4">{order.item.title}</td> <td className="p-4">{order.date}</td> <td className="p-4"><span className="bg-blue-100 text-blue-800 px-2 py-1 text-xs font-semibold rounded-full">Redeemed</span></td> </tr>))}</tbody></table></div> ); return <div className="bg-gray-100 dark:bg-gray-900 min-h-screen"><div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12"><div className="mb-8"><h1 className="text-3xl font-bold text-gray-900 dark:text-white">Vendor Dashboard</h1><p className="text-lg text-gray-500 dark:text-gray-400">Manage your business on Mufta.</p></div><div className="border-b border-gray-200 dark:border-gray-700 mb-8"><nav className="-mb-px flex space-x-8" aria-label="Tabs">{tabs.map(tab => ( <button key={tab.id} onClick={() => setActiveTab(tab.id)} className={`whitespace-nowrap flex py-4 px-1 border-b-2 font-medium text-sm items-center gap-2 ${activeTab === tab.id ? 'border-pink-500 text-pink-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-200 dark:hover:border-gray-500'}`}>{tab.icon} {tab.name}</button>))} </nav></div><div> {activeTab === 'overview' && <Overview />} {activeTab === 'services' && <Services />} {activeTab === 'orders' && <Orders />}</div></div></div> };
const CreateDealPage = ({ primaryColor, secondaryColor, navigateTo, categories }: { primaryColor: string, secondaryColor: string, navigateTo: (page: string) => void, categories: any[] }) => { const [step, setStep] = useState(1); const [dealData, setDealData] = useState({ type: '', title: '', description: '', rules: '', stock: 100, price: 0, city: 'Gujranwala', image: null }); const [isGenerating, setIsGenerating] = useState(false); const steps = [ { id: 1, name: 'Service Type', icon: <Tag/> }, { id: 2, name: 'Details', icon: <Info/> }, { id: 3, name: 'Logistics', icon: <ListChecks/> }, { id: 4, name: 'Images', icon: <ImageIcon/> }, { id: 5, name: 'Review', icon: <Check/> } ]; const nextStep = () => setStep(s => Math.min(s + 1, steps.length)); const prevStep = () => setStep(s => Math.max(s - 1, 1)); const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => { const { name, value } = e.target; const parsedValue = name === 'stock' || name === 'price' ? parseInt(value, 10) || 0 : value; setDealData(d => ({...d, [name]: parsedValue })); }; const handleGenerateDescription = async () => { if (!dealData.title) { alert("Please enter a title first."); return; } setIsGenerating(true); const prompt = `You are a marketing expert for a local deals website in Pakistan. A vendor is creating a deal with the title "${dealData.title}". Write an exciting, short description (2-3 sentences) and a fair, clear set of rules for this deal. The tone should be friendly and encourage customers to buy. Separate the description and rules with a line containing only '---'.`; const result = await callGemini(prompt); const [description, rules] = result.split('---'); setDealData(d => ({...d, description: description.trim(), rules: rules.trim() })); setIsGenerating(false); }; return <div className="bg-gray-100 dark:bg-gray-900 min-h-screen"><div className="max-w-5xl mx-auto px-4 py-12"><h1 className="text-3xl font-bold text-center mb-2">Create a New Deal</h1><p className="text-center text-gray-500 dark:text-gray-400 mb-8">Follow the steps to get your new deal listed on Mufta.</p><div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-8"><div className="mb-12"><ol className="flex items-center w-full">{steps.map((s, index) => ( <li key={s.id} className={`flex w-full items-center ${index + 1 < steps.length ? "after:content-[''] after:w-full after:h-1 after:border-b after:border-4 after:inline-block" : ''} ${step > s.id ? 'after:border-pink-600' : 'after:border-gray-200 dark:after:border-gray-700'}`}><span className={`flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0 ${step >= s.id ? 'bg-pink-600 text-white' : 'bg-gray-200 dark:bg-gray-700'}`}>{s.icon}</span></li>))}</ol></div><div> {step === 1 && <div><h3 className="text-xl font-semibold mb-4">Step 1: What kind of service are you offering?</h3><div className="grid grid-cols-2 md:grid-cols-3 gap-4">{categories.map(cat => ( <button key={cat.id} onClick={() => {handleInput({target: {name: 'type', value: cat.name}} as any); nextStep();}} className="flex flex-col items-center p-6 border-2 dark:border-gray-700 rounded-lg hover:border-pink-500 data-[selected=true]:border-pink-500 data-[selected=true]:bg-pink-50 dark:hover:border-pink-500 dark:data-[selected=true]:bg-pink-900/20" data-selected={dealData.type === cat.name}>{React.cloneElement(cat.icon, {className: "w-8 h-8"})}<span className="mt-2 font-medium">{cat.name}</span></button>))}</div></div>} {step === 2 && <div><h3 className="text-xl font-semibold mb-4">Step 2: Describe your deal</h3><div className="space-y-4"><input type="text" name="title" value={dealData.title} onChange={handleInput} placeholder="e.g., Buy 1 Get 1 Free Pizza" className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg" /><button onClick={handleGenerateDescription} disabled={isGenerating || !dealData.title} className="flex items-center gap-2 text-sm font-semibold text-white py-2 px-4 rounded-lg disabled:opacity-50" style={{backgroundColor: secondaryColor}}>{isGenerating ? <Loader2 className="animate-spin w-5 h-5"/> : <Sparkles className="w-5 h-5"/>}{isGenerating ? 'Generating...' : '‚ú® Generate with AI'}</button><textarea name="description" value={dealData.description} onChange={handleInput} placeholder="Detailed description of your offer..." rows={4} className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg"></textarea><textarea name="rules" value={dealData.rules} onChange={handleInput} placeholder="Rules and conditions..." rows={3} className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg"></textarea></div></div>} {step === 3 && <div><h3 className="text-xl font-semibold mb-4">Step 3: Set the logistics</h3><div className="grid md:grid-cols-2 gap-6"><div><label className="block font-medium mb-1">Stock / Quantity</label><input type="number" name="stock" value={dealData.stock} onChange={handleInput} className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg" /></div><div><label className="block font-medium mb-1">Price (PKR)</label><input type="number" name="price" value={dealData.price} onChange={handleInput} className="w-full p-3 border dark:border-gray-600 bg-transparent rounded-lg" /></div><div className="md:col-span-2"><label className="block font-medium mb-1">City</label><select name="city" value={dealData.city} onChange={handleInput} className="w-full p-3 border dark:border-gray-600 bg-white dark:bg-gray-800 rounded-lg">{availableCities.map(c => <option key={c}>{c}</option>)}</select></div></div></div>} {step === 4 && <div><h3 className="text-xl font-semibold mb-4">Step 4: Upload an attractive image</h3><div className="mt-1 flex justify-center px-6 pt-10 pb-10 border-2 border-gray-300 dark:border-gray-600 border-dashed rounded-md"><div className="space-y-1 text-center"><UploadCloud className="mx-auto h-12 w-12 text-gray-400"/><div className="flex text-sm text-gray-600 dark:text-gray-400"><label htmlFor="file-upload" className="relative cursor-pointer bg-white dark:bg-gray-800 rounded-md font-medium text-pink-600 hover:text-pink-500"><span>Upload a file</span><input id="file-upload" name="file-upload" type="file" className="sr-only" /></label><p className="pl-1">or drag and drop</p></div><p className="text-xs text-gray-500 dark:text-gray-400">PNG, JPG up to 5MB</p></div></div></div>} {step === 5 && <div><h3 className="text-xl font-semibold mb-4">Step 5: Review and Submit</h3><div className="border dark:border-gray-700 rounded-lg p-6 space-y-3"><p><strong>Type:</strong> {dealData.type}</p><p><strong>Title:</strong> {dealData.title}</p><p><strong>Description:</strong> {dealData.description}</p><p><strong>Rules:</strong> {dealData.rules}</p><p><strong>Stock:</strong> {dealData.stock}</p><p><strong>Price:</strong> PKR {dealData.price}</p><p><strong>City:</strong> {dealData.city}</p></div></div>}</div><div className="mt-8 flex justify-between"><button onClick={prevStep} disabled={step === 1} className="py-2 px-6 bg-gray-200 dark:bg-gray-700 rounded-lg font-semibold disabled:opacity-50">Back</button>{step < steps.length ? ( <button onClick={nextStep} className="py-2 px-6 text-white rounded-lg font-semibold" style={{backgroundColor: primaryColor}}>Next</button>) : ( <button onClick={() => navigateTo('vendor_dashboard')} className="py-2 px-6 bg-green-500 text-white rounded-lg font-semibold">Submit Deal</button>)}</div></div></div></div>; };
const LoyaltyPage = ({ points, ledger, primaryColor, secondaryColor, rewards, stampCards }: { points: number, ledger: any[], primaryColor: string, secondaryColor: string, rewards: any[], stampCards: any[] }) => ( <div className="max-w-7xl mx-auto px-4 py-12"><div className="text-center mb-12"><h1 className="text-4xl font-extrabold tracking-tight">Loyalty Hub</h1><p className="mt-4 max-w-2xl mx-auto text-lg text-gray-500 dark:text-gray-400">Your rewards hub. Earn points, collect stamps, and get exclusive benefits.</p></div><div className="grid lg:grid-cols-3 gap-8 items-start"><div className="lg:col-span-1 space-y-8"><div className="bg-white p-6 rounded-2xl shadow-lg text-center" style={{background: `linear-gradient(135deg, ${primaryColor}, ${secondaryColor})`}}><p className="font-semibold text-white/80">Your Balance</p><p className="text-5xl font-bold text-white mt-2">{points.toLocaleString()}</p><p className="text-white/80">Points</p></div><button className="w-full flex items-center justify-center gap-3 py-4 bg-green-500 text-white rounded-xl shadow-lg font-bold text-lg hover:bg-green-600 transition-transform hover:scale-105"><QrCode/> Scan Receipt QR Code</button><div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg"><h3 className="font-bold text-lg mb-4">Digital Wallet</h3><p className="text-sm text-gray-600 dark:text-gray-400 mb-4">Add your Muffta loyalty card to your phone's wallet for easy access.</p><div className="space-y-3"><button className="w-full flex items-center justify-center gap-2 py-3 bg-black text-white rounded-lg font-semibold"><img src="https://upload.wikimedia.org/wikipedia/commons/3/34/Apple_Wallet_logo.svg" alt="Apple Wallet" className="h-6"/>Add to Apple Wallet</button><button className="w-full flex items-center justify-center gap-2 py-3 mt-3 border border-gray-300 dark:border-gray-600 rounded-lg font-semibold"><img src="https://upload.wikimedia.org/wikipedia/commons/f/f1/Google_Wallet_logo.svg" alt="Google Wallet" className="h-6"/>Add to Google Wallet</button></div></div></div><div className="lg:col-span-2 space-y-12"><div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg"><h3 className="font-bold text-lg mb-4">Your Stamp Cards</h3>{stampCards.length > 0 ? <div className="grid md:grid-cols-2 gap-6">{stampCards.map(card => (<div key={card.id} className="border dark:border-gray-700 rounded-lg p-4"><div className="flex justify-between items-start"><div className="flex-grow"><p className="font-semibold">{card.title}</p><p className="text-sm text-gray-500 dark:text-gray-400">{card.vendor}</p></div><span className="text-4xl">{card.icon}</span></div><div className="grid grid-cols-5 gap-2 mt-4">{Array.from({length: card.totalStamps}).map((_, i) => (<div key={i} className={`w-full aspect-square rounded-full flex items-center justify-center ${i < card.currentStamps ? 'bg-green-500' : 'bg-gray-200 dark:bg-gray-700'}`}>{i < card.currentStamps && <Check className="text-white"/>}</div>))}</div><p className="text-center text-sm text-gray-600 dark:text-gray-400 mt-2">{card.currentStamps} / {card.totalStamps} stamps</p></div>))}</div> : <p className="text-gray-500 dark:text-gray-400 text-center py-8">You haven't started any stamp cards yet. Make a purchase to begin!</p>}</div><div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg"><h3 className="font-bold text-lg mb-4">Redeem Your Points</h3>{rewards.length > 0 ? <div className="space-y-4">{rewards.map(reward => (<div key={reward.id} className="flex items-center gap-4 p-4 border dark:border-gray-700 rounded-lg"><img src={reward.imageUrl} alt={reward.title} className="w-20 h-20 rounded-md object-cover"/><div className="flex-grow"><p className="font-semibold">{reward.title}</p><p className="text-sm text-gray-500 dark:text-gray-400">{reward.vendor}</p></div><div className="text-right flex-shrink-0"><p className="font-bold text-lg" style={{color: primaryColor}}>{reward.points.toLocaleString()} pts</p><button className="mt-1 text-sm font-semibold text-white py-1 px-3 rounded-md transition-colors" style={{backgroundColor: secondaryColor}} disabled={points < reward.points}>Redeem</button></div></div>))}</div> : <p className="text-gray-500 dark:text-gray-400 text-center py-8">No rewards available.</p>}</div></div></div></div> );
const AdminLayout = ({ user, onLogout, primaryColor, children, activePage, setActivePage }: { user: any, onLogout: () => void, primaryColor: string, children: React.ReactNode, activePage: string, setActivePage: (page: string) => void }) => { const navItems = [ { id: 'dashboard', name: 'Dashboard', icon: <LayoutDashboard /> }, { id: 'categories', name: 'Categories', icon: <Bookmark /> }, { id: 'vendors', name: 'Vendors', icon: <Store /> }, { id: 'refunds', name: 'Refunds', icon: <RotateCw /> }, { id: 'banners', name: 'Banners', icon: <ImageIcon /> }, { id: 'analytics', name: 'Analytics', icon: <BarChart2 /> }, ]; return <div className="flex h-screen bg-gray-100"><aside className="w-64 bg-gray-800 text-white flex flex-col"><div className="h-20 flex items-center justify-center text-2xl font-bold" style={{color: primaryColor}}>Mufta <span className="text-white ml-2">Admin</span></div><nav className="flex-1 px-4 py-4 space-y-2">{navItems.map(item => ( <button key={item.id} onClick={() => setActivePage(item.id)} className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-colors ${activePage === item.id ? 'bg-pink-600' : 'hover:bg-gray-700'}`}>{item.icon}<span>{item.name}</span></button>))} </nav><div className="p-4 border-t border-gray-700"><button onClick={onLogout} className="w-full flex items-center gap-3 px-4 py-3 rounded-lg hover:bg-gray-700"><LogOut /><span>Logout</span></button></div></aside><div className="flex-1 flex flex-col"><header className="h-20 bg-white shadow-md flex items-center justify-between px-8"><h2 className="text-xl font-semibold capitalize">{activePage.replace('_', ' ')}</h2><div className="flex items-center gap-4"><button className="p-2 rounded-full hover:bg-gray-100"><Bell /></button><div className="flex items-center gap-2"><User className="w-8 h-8 p-1.5 bg-gray-200 rounded-full"/><div><p className="font-semibold text-sm">{user.name}</p><p className="text-xs text-gray-500">{user.email}</p></div></div></div></header><main className="flex-1 p-8 overflow-y-auto">{children}</main></div></div>; };
const AdminDashboardPage = () => { const kpiData = [ { title: 'Total Revenue', value: 'PKR 1.2M', change: '+15.2%', icon: <Wallet/>, color: 'text-green-500' }, { title: 'Active Users', value: '25,849', change: '+8.1%', icon: <Users/>, color: 'text-blue-500' }, { title: 'Active Vendors', value: '1,250', change: '+32', icon: <Store/>, color: 'text-yellow-500' }, { title: 'Pending Refunds', value: '12', change: '', icon: <Clock/>, color: 'text-red-500' }, ]; return <div><h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-8">{kpiData.map(kpi => ( <div key={kpi.title} className="bg-white p-6 rounded-2xl shadow-lg flex items-start justify-between"><div><p className="text-sm font-medium text-gray-500">{kpi.title}</p><p className="text-3xl font-bold text-gray-900 mt-2">{kpi.value}</p>{kpi.change && <p className="text-sm text-green-500 mt-1">{kpi.change}</p>}</div><div className={`p-3 rounded-lg bg-gray-100 ${kpi.color}`}>{React.cloneElement(kpi.icon, {className: "w-8 h-8"})}</div></div>))}</div></div>; };
const AdminVendorsPage = ({ vendors, setVendors }: { vendors: any[], setVendors: (v: any) => void }) => { const updateVendorStatus = (id: number, status: string) => { setVendors((current: any[]) => current.map(v => v.id === id ? {...v, status} : v)); }; const getStatusColor = (status: string) => { switch (status) { case 'Active': return 'bg-green-100 text-green-800'; case 'Pending Approval': return 'bg-yellow-100 text-yellow-800'; case 'Suspended': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; return <div><h1 className="text-3xl font-bold text-gray-900 mb-8">Vendor Management</h1><div className="bg-white rounded-lg shadow-lg overflow-hidden"><table className="w-full text-left"><thead className="bg-gray-50"><tr className="border-b"><th className="p-4">Vendor</th><th className="p-4">City</th><th className="p-4">Type</th><th className="p-4">Joined</th><th className="p-4">Status</th><th className="p-4">Actions</th></tr></thead><tbody>{vendors.map(vendor => ( <tr key={vendor.id} className="border-b last:border-none hover:bg-gray-50"><td className="p-4 font-medium">{vendor.name}</td><td className="p-4">{vendor.city}</td><td className="p-4">{vendor.type}</td><td className="p-4">{vendor.joined}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(vendor.status)}`}>{vendor.status}</span></td><td className="p-4">{vendor.status === 'Pending Approval' ? ( <div className="flex gap-2"><button onClick={() => updateVendorStatus(vendor.id, 'Active')} className="p-2 bg-green-100 text-green-600 rounded-full hover:bg-green-200"><CheckCircle2 className="w-5 h-5"/></button><button onClick={() => updateVendorStatus(vendor.id, 'Suspended')} className="p-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200"><XCircle className="w-5 h-5"/></button></div>) : ( <div className="flex gap-2"><button onClick={() => updateVendorStatus(vendor.id, 'Suspended')} className="p-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200"><UserX className="w-5 h-5"/></button></div>)}</td></tr>))}</tbody></table></div></div>; };
const AdminCategoriesPage = ({ categories, setCategories, primaryColor }: { categories: any[], setCategories: (c: any) => void, primaryColor: string }) => { const [isModalOpen, setIsModalOpen] = useState(false); const [currentCategory, setCurrentCategory] = useState<any>(null); const [categoryName, setCategoryName] = useState(''); const openModal = (category = null) => { setCurrentCategory(category); setCategoryName(category ? category.name : ''); setIsModalOpen(true); }; const closeModal = () => { setIsModalOpen(false); setCurrentCategory(null); setCategoryName(''); }; const handleSave = () => { if (currentCategory) { setCategories((cats: any[]) => cats.map(c => c.id === currentCategory.id ? {...c, name: categoryName} : c)); } else { setCategories((cats: any[]) => [...cats, {id: Math.max(...cats.map(c => c.id)) + 1, name: categoryName}]); } closeModal(); }; const handleDelete = (id: number) => { setCategories((cats: any[]) => cats.filter(c => c.id !== id)); }; return <div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-gray-900">Category Management</h1><button onClick={() => openModal()} className="flex items-center gap-2 px-4 py-2 text-white rounded-lg font-semibold" style={{backgroundColor: primaryColor}}><Plus className="w-5 h-5"/> Add Category</button></div><div className="bg-white rounded-lg shadow-lg overflow-hidden"><table className="w-full text-left"><thead className="bg-gray-50"><tr className="border-b"><th className="p-4">ID</th><th className="p-4">Name</th><th className="p-4">Actions</th></tr></thead><tbody>{categories.map(cat => ( <tr key={cat.id} className="border-b last:border-none hover:bg-gray-50"><td className="p-4 font-mono text-gray-500">{cat.id}</td><td className="p-4 font-medium">{cat.name}</td><td className="p-4"><div className="flex gap-2"><button onClick={() => openModal(cat)} className="p-2 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200"><Edit className="w-5 h-5"/></button><button onClick={() => handleDelete(cat.id)} className="p-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200"><Trash2 className="w-5 h-5"/></button></div></td></tr>))}</tbody></table></div><Modal isOpen={isModalOpen} onClose={closeModal}><div className="p-6"><h2 className="text-2xl font-bold mb-4">{currentCategory ? 'Edit' : 'Add'} Category</h2><input type="text" value={categoryName} onChange={(e) => setCategoryName(e.target.value)} placeholder="Category Name" className="w-full p-3 border rounded-lg mb-6" /><div className="flex justify-end gap-4"><button onClick={closeModal} className="px-4 py-2 bg-gray-200 rounded-lg font-semibold">Cancel</button><button onClick={handleSave} className="px-4 py-2 text-white rounded-lg font-semibold" style={{backgroundColor: primaryColor}}>Save</button></div></div></Modal></div>; };
const AdminRefundsPage = ({ refunds, setRefunds }: { refunds: any[], setRefunds: (r: any) => void }) => { const [summaries, setSummaries] = useState<{ [key: string]: string }>({}); const [loadingSummary, setLoadingSummary] = useState<number | null>(null); const handleSummarize = async (id: number, reason: string) => { setLoadingSummary(id); const prompt = `Summarize this customer's refund reason into a single, concise sentence: "${reason}"`; const summary = await callGemini(prompt); setSummaries(s => ({...s, [id]: summary })); setLoadingSummary(null); }; const updateRefundStatus = (id: number, status: string) => { setRefunds((current: any[]) => current.map(r => r.id === id ? {...r, status} : r)); }; const getStatusColor = (status: string) => { switch (status) { case 'Approved': return 'bg-green-100 text-green-800'; case 'Pending': return 'bg-yellow-100 text-yellow-800'; case 'Rejected': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; return <div><h1 className="text-3xl font-bold text-gray-900 mb-8">Refund Management</h1><div className="bg-white rounded-lg shadow-lg overflow-hidden"><table className="w-full text-left"><thead className="bg-gray-50"><tr className="border-b"><th className="p-4">Order ID</th><th className="p-4">Vendor</th><th className="p-4">Amount</th><th className="p-4">Reason</th><th className="p-4">Date</th><th className="p-4">Status</th><th className="p-4">Actions</th></tr></thead><tbody>{refunds.map(refund => ( <tr key={refund.id} className="border-b last:border-none hover:bg-gray-50"><td className="p-4 font-mono text-pink-600">#{refund.orderId}</td><td className="p-4 font-medium">{refund.vendor}</td><td className="p-4">PKR {refund.amount}</td><td className="p-4 text-sm text-gray-600">{summaries[refund.id] || refund.reason}{refund.reason.length > 50 && !summaries[refund.id] && (<button onClick={() => handleSummarize(refund.id, refund.reason)} disabled={loadingSummary === refund.id} className="ml-2 text-pink-500 disabled:opacity-50">{loadingSummary === refund.id ? <Loader2 className="w-4 h-4 animate-spin"/> : <Sparkles className="w-4 h-4"/>}</button>)}</td><td className="p-4">{refund.date}</td><td className="p-4"><span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(refund.status)}`}>{refund.status}</span></td><td className="p-4">{refund.status === 'Pending' && ( <div className="flex gap-2"><button onClick={() => updateRefundStatus(refund.id, 'Approved')} className="p-2 bg-green-100 text-green-600 rounded-full hover:bg-green-200"><CheckCircle2 className="w-5 h-5"/></button><button onClick={() => updateRefundStatus(refund.id, 'Rejected')} className="p-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200"><XCircle className="w-5 h-5"/></button></div>)}</td></tr>))}</tbody></table></div></div>; };
const AdminBannersPage = ({ banners, setBanners, primaryColor }: { banners: any[], setBanners: (b: any) => void, primaryColor: string }) => { const [isModalOpen, setIsModalOpen] = useState(false); const [currentBanner, setCurrentBanner] = useState<any>(null); const [bannerData, setBannerData] = useState({ name: '', position: 'Hero (Home)', city: 'All', status: true, imageUrl: '' }); const openModal = (banner = null) => { setCurrentBanner(banner); if (banner) { setBannerData(banner); } else { setBannerData({ name: '', position: 'Hero (Home)', city: 'All', status: true, imageUrl: '' }); } setIsModalOpen(true); }; const closeModal = () => { setIsModalOpen(false); setCurrentBanner(null); }; const handleSave = () => { if (currentBanner) { setBanners((bs: any[]) => bs.map(b => b.id === currentBanner.id ? bannerData : b)); } else { setBanners((bs: any[]) => [...bs, {...bannerData, id: Math.max(...bs.map(b => b.id)) + 1 }]); } closeModal(); }; const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => setBannerData({...bannerData, [e.target.name]: e.target.value}); const toggleStatus = (id: number) => setBanners((bs: any[]) => bs.map(b => b.id === id ? {...b, status: !b.status} : b)); return <div><div className="flex justify-between items-center mb-8"><h1 className="text-3xl font-bold text-gray-900">Banner Management</h1><button onClick={() => openModal()} className="flex items-center gap-2 px-4 py-2 text-white rounded-lg font-semibold" style={{backgroundColor: primaryColor}}><Plus className="w-5 h-5"/> Add Banner</button></div><div className="bg-white rounded-lg shadow-lg overflow-hidden"><table className="w-full text-left"><thead className="bg-gray-50"><tr className="border-b"><th className="p-4">Preview</th><th className="p-4">Name</th><th className="p-4">Position</th><th className="p-4">City</th><th className="p-4">Status</th><th className="p-4">Actions</th></tr></thead><tbody>{banners.map(banner => ( <tr key={banner.id} className="border-b last:border-none hover:bg-gray-50"><td className="p-4"><img src={banner.imageUrl} alt={banner.name} className="h-12 w-24 object-cover rounded-md"/></td><td className="p-4 font-medium">{banner.name}</td><td className="p-4">{banner.position}</td><td className="p-4">{banner.city}</td><td className="p-4"><button onClick={() => toggleStatus(banner.id)} className={`w-12 h-6 rounded-full p-1 flex items-center transition-colors ${banner.status ? 'bg-green-500' : 'bg-gray-300'}`}><span className={`w-4 h-4 bg-white rounded-full transform transition-transform ${banner.status ? 'translate-x-6' : 'translate-x-0'}`}/></button></td><td className="p-4"><div className="flex gap-2"><button onClick={() => openModal(banner)} className="p-2 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200"><Edit className="w-5 h-5"/></button><button onClick={() => {}} className="p-2 bg-red-100 text-red-600 rounded-full hover:bg-red-200"><Trash2 className="w-5 h-5"/></button></div></td></tr>))}</tbody></table></div><Modal isOpen={isModalOpen} onClose={closeModal}><div className="p-6"><h2 className="text-2xl font-bold mb-4">{currentBanner ? 'Edit' : 'Add'} Banner</h2><div className="space-y-4"><input type="text" name="name" value={bannerData.name} onChange={handleInput} placeholder="Banner Name" className="w-full p-3 border rounded-lg" /><select name="position" value={bannerData.position} onChange={handleInput} className="w-full p-3 border rounded-lg bg-white"><option>Hero (Home)</option><option>Category Top</option><option>Search Rail</option><option>Side Rail</option></select><select name="city" value={bannerData.city} onChange={handleInput} className="w-full p-3 border rounded-lg bg-white"><option>All</option>{availableCities.map(c => <option key={c}>{c}</option>)}</select><input type="text" name="imageUrl" value={bannerData.imageUrl} onChange={handleInput} placeholder="Image URL" className="w-full p-3 border rounded-lg" /></div><div className="flex justify-end gap-4 mt-6"><button onClick={closeModal} className="px-4 py-2 bg-gray-200 rounded-lg font-semibold">Cancel</button><button onClick={handleSave} className="px-4 py-2 text-white rounded-lg font-semibold" style={{backgroundColor: primaryColor}}>Save</button></div></div></Modal></div>; };
const Chatbot = ({ primaryColor }: { primaryColor: string }) => { const [isOpen, setIsOpen] = useState(false); const [messages, setMessages] = useState([ { id: 1, text: "Hi there! How can I help you today?", sender: 'bot' } ]); const [input, setInput] = useState(''); const chatEndRef = useRef<HTMLDivElement>(null); useEffect(() => { chatEndRef.current?.scrollIntoView({ behavior: 'smooth' }); }, [messages]); const handleSend = (e: React.FormEvent) => { e.preventDefault(); if (!input.trim()) return; const newUserMessage = { id: Date.now(), text: input, sender: 'user' }; setMessages(m => [...m, newUserMessage]); setInput(''); setTimeout(() => { const botResponse = { id: Date.now() + 1, text: "Thanks for your message! This is a demo. In a real app, an AI would provide a helpful answer based on your question.", sender: 'bot' }; setMessages(m => [...m, botResponse]); }, 1000); }; return <> <button onClick={() => setIsOpen(!isOpen)} className="fixed bottom-6 right-6 bg-pink-600 text-white p-4 rounded-full shadow-lg hover:bg-pink-700 transition-transform hover:scale-110 z-50">{isOpen ? <X className="w-8 h-8"/> : <MessageSquare className="w-8 h-8"/>}</button>{isOpen && <div className="fixed bottom-24 right-6 w-full max-w-sm h-[60vh] bg-white rounded-2xl shadow-2xl flex flex-col z-50"><div className="p-4 border-b text-center" style={{backgroundColor: primaryColor, color: 'white'}}><h3 className="font-bold text-lg">Mufta AI Assistant</h3></div><div className="flex-1 p-4 overflow-y-auto">{messages.map(msg => ( <div key={msg.id} className={`flex mb-4 ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}><div className={`max-w-[80%] p-3 rounded-2xl ${msg.sender === 'user' ? 'bg-pink-600 text-white' : 'bg-gray-200 text-gray-800'}`}>{msg.text}</div></div>))}{<div ref={chatEndRef} />}</div><form onSubmit={handleSend} className="p-4 border-t flex gap-2"><input type="text" value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask a question..." className="w-full p-3 border rounded-lg" /><button type="submit" className="p-3 text-white rounded-lg" style={{backgroundColor: primaryColor}}><Send/></button></form></div>}</>; };


// --- Main App Component ---
export default function App() {
  const [page, setPage] = useState<PageState>({ name: 'home', params: {} });
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [modalContent, setModalContent] = useState<string | null>(null);
  const [currentCity, setCurrentCity] = useState('Gujranwala');
  const [currentUser, setCurrentUser] = useState<any | null>(null);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [installPromptEvent, setInstallPromptEvent] = useState<any | null>(null);
  const [showInstallPrompt, setShowInstallPrompt] = useState(false);
  const [adminPage, setAdminPage] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(false);

  const [cart, setCart] = useStore([]);
  const [wishlist, setWishlist] = useStore([]);
  const [orders, setOrders] = useStore([]);
  const [userEntries, setUserEntries] = useStore({});
  const [loyaltyPoints, setLoyaltyPoints] = useStore(1250);
  const [pointsLedger, setPointsLedger] = useStore([ {id: 1, description: "Welcome Bonus", date: "July 18, 2025", delta: 1000}, {id: 2, description: "Order #ABC123", date: "July 19, 2025", delta: 250}, ]);
  const [vendors, setVendors] = useStore(initialVendors);
  const [categories, setCategories] = useStore(initialCategories);
  const [refunds, setRefunds] = useStore(initialRefunds);
  const [banners, setBanners] = useStore(initialBanners);
  const [cityDeals, setCityDeals] = useState([]);
  const primaryColor = '#FF3366';
  const secondaryColor = '#2E1065';
  
  const dynamicCategories = useMemo(() => {
    return categories.map(cat => {
        const iconMap = { Coupons: <Ticket/>, Gifts: <Gift/>, Spins: <Zap/>, Scratches: <Star/>, Draws: <Award/> };
        return { id: cat.name.toLowerCase(), name: cat.name, icon: iconMap[cat.name] || <Tag/> };
    });
  }, [categories]);

  useEffect(() => {
    const fetchDeals = () => {
        setIsLoading(true);
        // Simulate API call
        setTimeout(() => {
            setCityDeals(allDeals.filter(deal => deal.city === currentCity));
            setIsLoading(false);
        }, 1000);
    };
    fetchDeals();
  }, [currentCity]);

  useEffect(() => { const handleBeforeInstallPrompt = (e: any) => { e.preventDefault(); setInstallPromptEvent(e); if (!localStorage.getItem('muftaInstallDismissed')) { setShowInstallPrompt(true); } }; window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt); return () => window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt); }, []);
  const handleInstall = () => { if (!installPromptEvent) return; (installPromptEvent as any).prompt(); setShowInstallPrompt(false); setInstallPromptEvent(null); };
  const handleDismissInstall = () => { setShowInstallPrompt(false); localStorage.setItem('muftaInstallDismissed', 'true'); setTimeout(() => localStorage.removeItem('muftaInstallDismissed'), 86400000); };

  const addToCart = (deal: any) => { setCart(current => { const existing = current.find(i => i.id === deal.id); if (existing) return current; return [...current, { ...deal, quantity: 1 }]; }); };
  const updateCartQuantity = (dealId: number, quantity: number) => { if (quantity === 0) { removeFromCart(dealId); return; } setCart((current: any[]) => current.map(i => i.id === dealId ? { ...i, quantity } : i)); };
  const removeFromCart = (dealId: number) => { setCart((current: any[]) => current.filter(i => i.id !== dealId)); };
  const cartItemCount = useMemo(() => cart.reduce((acc, item) => acc + item.quantity, 0), [cart]);
  
  const toggleWishlist = (dealId: number) => { setWishlist(current => { const isWishlisted = current.some(id => id === dealId); if (isWishlisted) { return current.filter(id => id !== dealId); } return [...current, dealId]; }); };
  const removeWishlist = (dealId: number) => { setWishlist((current: any[]) => current.filter(id => id !== dealId)); };
  
  const handleCheckout = () => { if (!currentUser) { setModalContent('auth'); return; } if (cart.length === 0) return; const orderTotal = cart.reduce((acc, item) => acc + item.price * item.quantity, 0); const orderId = Math.random().toString(36).substr(2, 9).toUpperCase(); const newOrder = { id: orderId, date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }), status: 'Processing', items: cart, total: orderTotal }; setOrders((currentOrders: any[]) => [newOrder, ...currentOrders]); const pointsEarned = Math.floor(orderTotal / 10); if(pointsEarned > 0) { setLoyaltyPoints((p: number) => p + pointsEarned); setPointsLedger((l: any[]) => [{id: Math.random(), description: `Order #${orderId}`, date: newOrder.date, delta: pointsEarned}, ...l]); } setCart([]); setIsCartOpen(false); navigateTo('orders'); };
  
  const handleEnterDraw = (drawId: number) => { if (!currentUser) { setModalContent('auth'); return; } setUserEntries((current: any) => ({...current, [drawId]: (current[drawId] || 0) + 1 })); };

  const handleSelectCity = (city: string) => { setCurrentCity(city); setModalContent(null); };
  const handleLoginSuccess = (user: any) => { setCurrentUser(user); setModalContent(null); if (user.type === 'vendor') { navigateTo('vendor_dashboard'); } if (user.type === 'admin') { navigateTo('admin_dashboard'); }};
  const handleLogout = () => { setCurrentUser(null); setWishlist([]); setOrders([]); setUserEntries({}); setLoyaltyPoints(0); setPointsLedger([]); navigateTo('home'); };
  const navigateTo = (pageName: string, params = {}) => setPage({ name: pageName, params });
  const navigateToDeal = (dealId: number) => navigateTo('detail', { dealId });

  const couponDeals = useMemo(() => cityDeals.filter(deal => deal.category === 'coupons' && deal.price === 0), [cityDeals]);
  const favoriteDeals = useMemo(() => allDeals.filter(deal => wishlist.includes(deal.id)), [wishlist]);
  const drawDeals = useMemo(() => cityDeals.filter(deal => deal.category === 'draws'), [cityDeals]);
  const vendorDeals = useMemo(() => currentUser?.type === 'vendor' ? allDeals.filter(d => d.vendor === currentUser.name) : [], [currentUser]);
  const vendorOrders = useMemo(() => { if (currentUser?.type !== 'vendor') return []; const vendorDealIds = vendorDeals.map(d => d.id); return orders.filter((o: any) => o.items.some((item: any) => vendorDealIds.includes(item.id))).map((o: any) => ({...o, customer: 'Shopper User', item: o.items.find((i: any) => vendorDealIds.includes(i.id)) })); }, [currentUser, orders, vendorDeals]);


  const renderPage = () => {
    // Full-screen pages without common header
    if (page.name.startsWith('vendor_')) {
        switch(page.name) {
            case 'vendor_dashboard': return <VendorDashboardPage vendor={currentUser} vendorDeals={vendorDeals} vendorOrders={vendorOrders} primaryColor={primaryColor} secondaryColor={secondaryColor} navigateTo={navigateTo} />;
            case 'vendor_register': return <VendorRegistrationPage primaryColor={primaryColor} secondaryColor={secondaryColor} navigateTo={navigateTo} />;
            case 'vendor_create_deal': return <CreateDealPage primaryColor={primaryColor} secondaryColor={secondaryColor} navigateTo={navigateTo} categories={dynamicCategories} />;
            default: return <div className="text-center p-20">Page not found</div>;
        }
    }
    
    if (page.name.startsWith('admin_')) {
        return (
            <AdminLayout user={currentUser} onLogout={handleLogout} primaryColor={primaryColor} activePage={adminPage} setActivePage={setAdminPage}>
                {adminPage === 'dashboard' && <AdminDashboardPage />}
                {adminPage === 'vendors' && <AdminVendorsPage vendors={vendors} setVendors={setVendors} />}
                {adminPage === 'categories' && <AdminCategoriesPage categories={categories} setCategories={setCategories} primaryColor={primaryColor} />}
                {adminPage === 'refunds' && <AdminRefundsPage refunds={refunds} setRefunds={setRefunds} />}
                {adminPage === 'banners' && <AdminBannersPage banners={banners} setBanners={setBanners} primaryColor={primaryColor} />}
            </AdminLayout>
        );
    }

    // Shopper pages with common header
    return (
        <>
            <header className="bg-white dark:bg-gray-800 shadow-md sticky top-0 z-40">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <div className="flex items-center justify-between h-20">
                        <div className="flex items-center">
                            {page.name !== 'home' && <button onClick={() => navigateTo('home')} className="mr-4 p-2 rounded-full hover:bg-gray-100"><ArrowLeft /></button>}
                            <button onClick={() => navigateTo('home')} className="text-3xl font-bold" style={{ color: primaryColor }}>Mufta</button>
                        </div>
                        <nav className="hidden md:flex items-center space-x-8">
                            {dynamicCategories.map((cat) => <button key={cat.id} onClick={() => navigateTo(cat.id as string)} className="font-medium hover:text-pink-600">{cat.name}</button>)}
                        </nav>
                        <div className="hidden md:flex items-center space-x-4">
                            <button onClick={() => setModalContent('city')} className="flex items-center space-x-2 p-2 rounded-full hover:bg-gray-100"><Globe className="w-6 h-6" /><span className="text-sm font-medium hidden lg:block">{currentCity}</span></button>
                            <button onClick={() => setIsCartOpen(true)} className="relative p-2 rounded-full hover:bg-gray-100"><ShoppingCart className="w-6 h-6" />{cartItemCount > 0 && <span className="absolute top-0 right-0 block h-5 w-5 rounded-full text-xs text-white ring-2 ring-white" style={{backgroundColor: primaryColor}}>{cartItemCount}</span>}</button>
                            {currentUser ? <UserProfile user={currentUser} onLogout={handleLogout} navigateTo={navigateTo}/> : <button onClick={() => setModalContent('auth')} className="flex items-center space-x-2 px-4 py-2 border rounded-md text-white" style={{ backgroundColor: secondaryColor }}><User className="w-5 h-5" /><span>Login</span></button>}
                        </div>
                         <div className="md:hidden flex items-center space-x-2">
                            <button onClick={() => setIsCartOpen(true)} className="relative p-2"><ShoppingCart className="w-6 h-6" />{cartItemCount > 0 && <span className="absolute top-0 right-0 block h-4 w-4 rounded-full text-xs" style={{backgroundColor: primaryColor}}/>}</button>
                            <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="p-2">{isMenuOpen ? <X /> : <Menu />}</button>
                        </div>
                    </div>
                </div>
            </header>
            <main className="pb-24">
                {(() => {
                    switch (page.name) {
                        case 'coupons': return <CouponsPage deals={couponDeals} onAddToCart={addToCart} cart={cart} primaryColor={primaryColor} city={currentCity} navigateToDeal={navigateToDeal} />;
                        case 'detail': const deal = allDeals.find(d => d.id === page.params.dealId); return <DealDetailPage deal={deal} onAddToCart={addToCart} isInCart={cart.some(item => item.id === deal?.id)} primaryColor={primaryColor} toggleWishlist={toggleWishlist} isWishlisted={wishlist.some(id => id === deal?.id)} currentUser={currentUser} openAuthModal={() => setModalContent('auth')} />;
                        case 'favorites': return <FavoritesPage wishlist={favoriteDeals} onAddToCart={addToCart} cart={cart} primaryColor={primaryColor} navigateToDeal={navigateToDeal} removeWishlist={removeWishlist} />;
                        case 'orders': return <OrdersPage orders={orders} primaryColor={primaryColor} />;
                        case 'spins': return <SpinsPage primaryColor={primaryColor} secondaryColor={secondaryColor} />;
                        case 'scratches': return <ScratchesPage primaryColor={primaryColor} />;
                        case 'draws': return <DrawsPage draws={drawDeals} primaryColor={primaryColor} secondaryColor={secondaryColor} userEntries={userEntries} enterDraw={handleEnterDraw} />;
                        case 'loyalty': return <LoyaltyPage points={loyaltyPoints} ledger={pointsLedger} primaryColor={primaryColor} secondaryColor={secondaryColor} rewards={initialRewards} stampCards={initialStampCards} />;
                        default: return <HomePage setPage={(p) => navigateTo(p)} deals={cityDeals} onAddToCart={addToCart} cart={cart} primaryColor={primaryColor} navigateToDeal={navigateToDeal} navigateTo={navigateTo} categories={dynamicCategories} isLoading={isLoading} currentCity={currentCity} />;
                    }
                })()}
            </main>
            <Chatbot primaryColor={primaryColor}/>
        </>
    );
  };

  return (
    <div className="bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 font-sans">
      <Modal isOpen={!!modalContent} onClose={() => setModalContent(null)}>
          {modalContent === 'city' && <CitySelector onSelectCity={handleSelectCity} cities={availableCities} />}
          {modalContent === 'auth' && <AuthFlow onLoginSuccess={handleLoginSuccess} primaryColor={primaryColor} secondaryColor={secondaryColor} />}
      </Modal>
      <CartSidebar isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} cart={cart} updateQuantity={updateCartQuantity} removeFromCart={removeFromCart} primaryColor={primaryColor} handleCheckout={handleCheckout} />
      
      {renderPage()}

      {showInstallPrompt && <InstallPwaPrompt onInstall={handleInstall} onDismiss={handleDismissInstall} />}
    </div>
  );
}