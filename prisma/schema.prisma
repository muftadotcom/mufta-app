// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  name        String?
  phone       String?  @unique
  password    String?
  role        String   @default("SHOPPER")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  otp         String?
  otpExpires  DateTime?
  isVerified  Boolean  @default(false)

  vendor      Vendor?
  orders      Order[]
  points      PointsLedger[]
}

model Vendor {
  id                  String @id @default(cuid())
  businessName        String
  businessDescription String? @db.Text
  heroImageUrl        String?
  
  status              String   @default("PENDING_APPROVAL") // PENDING_APPROVAL, ACTIVE, SUSPENDED
  
  userId              String @unique
  user                User   @relation(fields: [userId], references: [id])
  
  services            Service[]
  pointsLedger        PointsLedger[]
}

model Service {
  id          String @id @default(cuid())
  title       String
  description String @db.Text
  price       Float
  
  vendorId    String
  vendor      Vendor @relation(fields: [vendorId], references: [id])
  
  orders      OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  total     Float
  status    String      // PENDING, COMPLETED, CANCELLED
  createdAt DateTime    @default(now())
  
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
}

model PointsLedger {
  id        String   @id @default(cuid())
  points    Int
  reason    String
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
}

model FooterSettings {
  id           String    @id @default(cuid())
  aboutUs      String    @db.Text
  contactEmail String
  contactPhone String
  address      String
  facebookUrl  String?
  twitterUrl   String?
  instagramUrl String?
  updatedAt    DateTime  @updatedAt
}
